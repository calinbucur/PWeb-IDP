version: '3.3'

services:
  database:
    image: postgres:14.2-alpine
    ports:
      - 5432:5432
    secrets:
      - postgres_user
      - postgres_password
      - postgres_db
    environment:
      POSTGRES_USER_FILE: /run/secrets/postgres_user
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_DB_FILE: /run/secrets/postgres_db
    volumes:
      - dbvolume:/var/lib/postgresql/data
    networks:
      - database
      - dbadmin
      - monitoring
      - logging
  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: user@test.com
      PGADMIN_DEFAULT_PASSWORD: HSgSPdiURk3bcWBq5boNULg3N7P8
    ports:
      - "5050:80"
    depends_on:
      - database
    volumes:
      - pgadmindata:/var/lib/pgadmin
    networks:
      - dbadmin
      - monitoring
      - logging
  rabbitmq:
    image: rabbitmq:3.8-management-alpine
    secrets:
      - rabbitmq_password
      - rabbitmq_username
    environment:
      RABBITMQ_DEFAULT_PASS_FILE: /run/secrets/rabbitmq_password
      RABBITMQ_DEFAULT_USER_FILE: /run/secrets/rabbitmq_username
    ports:
      - 15672:15672
      - 5672:5672
    volumes:
      - rabbitmqdata:/var/lib/rabbitmq/
      - rabbitmqlogs:/var/log/rabbitmq/
    networks:
      - mail
      - rabbitmq
      - monitoring
      - logging
  api:
    image: idpreg.azurecr.io/api
    ports:
      - 5000:5000
      - 5001:5001
    networks:
      - internal
      - database
      - rabbitmq
      - monitoring
      - logging
    secrets:
      - postgres_user
      - postgres_password
      - postgres_db
      - rabbitmq_password
      - rabbitmq_username
    environment:
      POSTGRES_USER_FILE: /run/secrets/postgres_user
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_DB_FILE: /run/secrets/postgres_db
      DB_HOSTNAME: database
      RABBITMQ_DEFAULT_PASS_FILE: /run/secrets/rabbitmq_password
      RABBITMQ_DEFAULT_USER_FILE: /run/secrets/rabbitmq_username
  mail:
    image: idpreg.azurecr.io/mail-service
    networks:
      - mail
  frontend:
    image: idpreg.azurecr.io/frontend
    ports:
      - 8080:8080
    networks:
      - internal
      - monitoring
      - logging
    environment:
      API_HOSTNAME: kong
  kong:
    image: kong:latest
    volumes:
      - /var/lib/docker/volumes/portainer_portainer_data/_data/compose/7/kong/:/usr/local/kong/declarative #injectarea fisierului de configurare la calea specificata
    environment:
      KONG_DATABASE: 'off' #obligatoriu, daca se vrea modul DB-less
      KONG_DECLARATIVE_CONFIG: /usr/local/kong/declarative/kong.yml #trebuie specificat unde anume se va gasi fisierul de configurare
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
    ports:
      - 8001:8000 #expunerea porturilor
      - 8443:8443
    deploy:
      placement:
        constraints: [node.role == manager] #constrangerea de rulare doar pe master, pentru a nu exista conflict la nivel de volume
    networks:
      - internal
      - monitoring
      - logging

  prometheus:
    image: prom/prometheus
    volumes:
        - /var/lib/docker/volumes/portainer_portainer_data/_data/compose/7/configs/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
        - 9090:9090
    extra_hosts:
      host.docker.internal: host-gateway
    networks:
        - monitoring
        - visualizing

  node_exporter:
    image: prom/node-exporter
    deploy:
        mode: global
    volumes:
        - /proc:/host/proc:ro
        - /sys:/host/sys:ro
        - /:/rootfs:ro
    command:
        - '--path.procfs=/host/proc'
        - '--path.rootfs=/rootfs'
        - '--path.sysfs=/host/sys'
        - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
        - 9100:9100
    networks:
        - monitoring
    environment:
      - NODE_ID={{.Node.ID}}
  
  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    deploy:
        mode: global
    volumes:
        - /:/rootfs:ro
        - /var/run:/var/run:ro
        - /sys:/sys:ro
        - /var/lib/docker/:/var/lib/docker:ro
        - /dev/disk:/dev/disk/:ro
    ports:
        - 8007:8080
    networks:
        - monitoring

  loki:
    image: grafana/loki
    volumes:
        - /var/lib/docker/volumes/portainer_portainer_data/_data/compose/7/configs/loki.yml:/etc/config/loki.yml
        - loki-data:/data/loki
        - loki-wal:/wal
    entrypoint:
        - /usr/bin/loki
        - -config.file=/etc/config/loki.yml
    ports:
        - 3100:3100
    networks:
        - logging
        - visualizing

  grafana:
    image: grafana/grafana
    volumes:
        - grafana-volume:/var/lib/grafana
    ports:
        - 3000:3000
    depends_on:
        - loki
    deploy:
        placement:
            constraints: [node.role == manager]
    networks:
        - visualizing


volumes:
  dbvolume:
  rabbitmqdata:
  rabbitmqlogs:
  pgadmindata:
  grafana-volume:
  loki-data:
  loki-wal:

networks:
  monitoring:
  visualizing:
  logging:
  internal:
  database:
  dbadmin:
  mail:
  rabbitmq:

secrets:
  postgres_user:
    external: true
  postgres_password:
    external: true
  postgres_db:
    external: true
  pgadmin_default_mail:
    external: true
  pgadmin_default_password:
    external: true
  rabbitmq_password:
    external: true
  rabbitmq_username:
    external: true
